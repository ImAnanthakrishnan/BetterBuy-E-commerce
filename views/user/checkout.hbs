<div class="container-fluid" style="background-color: lightgreen;">
    <div class="checkoutLayout">
        <div class="returnCart">

            <a href="/all">Keep shopping</a>

            <h1>List Product In Cart</h1>
            {{#each cartData}}
            {{#each this.product}}
            <div class="list">
                <div class="item">
                    <img src="images/{{this.productId.images.[0]}}" alt="">
                    <div class="info">
                        <div class="name">{{this.productId.name}}</div>
                        <div class="price">Price:{{this.productId.price}}/- </div>
                    </div>
                    <div class="quantity">Qty:{{this.quantity}}</div>
                    <div class="returnPrice">Total:{{this.price}}/-</div>
                </div>
            </div>
            {{/each}}
            {{/each}}

        </div>
        <!--right side-->
        <div class="right">
            <h1>CHECKOUT</h1>
            <div class="form">
                <form  id="form" onsubmit="placeOrder(event)">
                <div class="group">
                    <label for="">Full Name</label>
                    <input type="text" name="fname" id="fname">
                    <div class="error text-danger"></div>
                </div>
                <div class="group">
                    <label for="">Phone Number</label>
                    <input type="text" name="phone" id="phone">
                     <div class="error text-danger"></div>
                </div>
                    <div id="alertContainer" class="alert alert-success alert-dismissible fade " role="alert" style="display:none;">
                      <strong id="alertStrong"> </strong> 
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                <div class="group">
                   <label for="">Address</label>
                    <select name="address1" id="addressDropdown" onchange="displayAddress()">
                        <option value="">Choose..</option>
                        {{#each address}}
                        
                        <option value="{{this._id}}" data-extra-action="addressFetch" style="color:#fff;">{{this.address}}</option>
                       
                        
                        {{/each}}
                    </select>
                     <div class="error text-danger"></div>
                </div>
               -- <div id="addressDetails" class="group">
                   <div>
                    <label for="address">Address:</label>
                    <input type="text" name="address" id="address" readonly required>
                     <div class="error text-danger"></div>
                     <input type="hidden" name="addressId" id="addressId" readonly required>
                     {{#each cartData}}
                     {{#each this.product}}
                     <input type="hidden" name="productId" value="{{this.productId._id}}">
                     <script>console.log('{{this.productId._id}}')</script>
                     {{/each}}
                     {{/each}}
                         {{#each cartData}}
                     {{#each this.product}}
                     <input type="hidden" name="proName" value="{{this.name}}">
                      <input type="hidden" name="quantity1" value="{{this.quantity}}">
                     <script>console.log('{{this.quantity}}')</script>
                       <input type="hidden" name="price" value="{{this.price}}">
                        {{/each}}
                     {{/each}}
                   </div>

        <div class="d-flex justify-content-space-between group">
    <div class="">
        <label for="district">District:</label>
        <input type="text" name="district" id="district" readonly required>
       <div class="error text-danger"></div>
    </div>
    <div>
        <label for="city">City:</label>
        <input type="text" name="city" id="city" readonly required>
         <div class="error text-danger"></div>
    </div>
    </div>
    <div class="d-flex">
    <div>
        <label for="pincode">Pincode:</label>
        <input type="text" name="pincode" id="pincode" readonly required>
         <div class="error text-danger"></div>
    </div>
    <div>
        <label for="state">State:</label>
        <input type="text" name="state" id="state" readonly required>
        <div class="error text-danger"></div>
    </div>
    </div>
    <div class="d-flex w-50">
    <div>
        <label for="country">Country:</label>
        <input type="text" name="country" id="country" readonly required>
        <div class="error text-danger"></div>
    </div>
     <div class="d-flex justify-content-between mt-5">
        <div class=" ms-3 me-3" id="editButtons"><a class="text-decoration-none text-bold  text-light " style="cursor: pointer;" onclick="toggleEditable([{id:'address',name:'address'},{id:'addressId', name:'addressId'},{ id: 'district', name: 'district' }, { id: 'city', name: 'city' }, { id: 'pincode', name: 'pincode' }, { id: 'state', name: 'state' }, { id: 'country', name: 'country' }])">Edit</a></div>

    <div class="d-none" id="saveChangesButton">
            <a class="text-decoration-none text-bold text-light " style="cursor: pointer;" onclick="saveChanges([{id:'address',name:'address'},{id:'addressId', name:'addressId'},{ id: 'district', name: 'district' }, { id: 'city', name: 'city' }, { id: 'pincode', name: 'pincode' }, { id: 'state', name: 'state' }, { id: 'country', name: 'country' }])">Save</a>
        </div>

        <div id="addButtons"> <a class="text-decoration-none text-bold  text-light" style="cursor: pointer;" onclick="toggleAdd([{id:'address',name:'address'},{ id: 'district', name: 'district' }, { id: 'city', name: 'city' }, { id: 'pincode', name: 'pincode' }, { id: 'state', name: 'state' }, { id: 'country', name: 'country' }])">Add</a></div>
        <div class="d-none" id="saveButton">
            <a class="text-decoration-none text-bold  text-light" style="cursor: pointer;" onclick="AddAddress(event,[{id:'address',name:'address'},{ id: 'district', name: 'district' }, { id: 'city', name: 'city' }, { id: 'pincode', name: 'pincode' }, { id: 'state', name: 'state' }, { id: 'country', name: 'country' }])">Save</a>
        </div>
     
       
    </div>
    
</div>
     </div>
              
                <div class="group">
                    <label for="payment">Payment</label>
                    <select name="payment" id="payment">
                        <option value="">Choose..</option>
                        <option value="COD">COD</option>
                        <option value="UPI">UPI</option>
                        <option value="WALLET">WALLET</option>
                    </select>
                     <div class="error text-danger"></div>
                </div>
                
            </div>
            <div class="return">
              <div class="row">
               <div>Total quantity</div>
          
               <div class="totalQuantity">{{totalQuantity}}
                <div></div>
               </div>
              
               <div class="row">
               <div>Total Price</div>
               {{#each cartData}}
               
               <div class="totalPrice">{{this.totalPrice}}/-</div>
               {{/each}}
              </div>
            </div>
    <div id="customAlertContainer" class="custom-alert alert alert-danger alert-dismissible fade show" role="alert" style="display:none;">
    <strong id="customAlertStrong"></strong>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
            <div id="error_true" class="text-danger"></div>
            <button class="buttonCheckout" type="submit">
                SUBMIT
            </button>
            </form>
        </div>
    </div>
</div>




</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
      

    // Render total quantity in the HTML
   




    async function displayAddress(){
        try{
            console.log('started')
     var selectedAddressElement = document.getElementById("addressDropdown");
        var selectedAddress = selectedAddressElement.value;
        var extraAction = selectedAddressElement.options[selectedAddressElement.selectedIndex].dataset.extraAction;
     console.log(extraAction)
         var addressDetailsContainer = document.getElementById("addressDetails");
     
         const response = await fetch(`/address-settings?id=${selectedAddress}&action=${extraAction}`,{
            method:'GET',
            headers:{
                'Content-Type':'application/json'
            }
         })
         if(response.ok){
            const result = await response.json();
           
                 document.getElementById("address").value = result.address.address;
                 document.getElementById('addressId').value = result.address._id;
                document.getElementById("district").value = result.address.district;
                document.getElementById("city").value = result.address.city;
                document.getElementById("pincode").value = result.address.pincode;
                document.getElementById("state").value = result.address.state;
                document.getElementById("country").value = result.address.country;

         }
        }
        catch(err){
            console.log('Error:', error);
        }
    }

     function toggleEditable(fields) {
    
        
        const ids = fields.map(field =>field.id)
       console.log(ids)
        ids.forEach(id => {
            const inputField = document.getElementById(id);
              if (inputField) {
            inputField.readOnly = !inputField.readOnly;
        } else {
            console.error(`Element with id '${id}' not found.`);
        }
    
        });

        // Toggle visibility of buttons
        document.getElementById('editButtons').classList.toggle('d-none');
        document.getElementById('saveChangesButton').classList.toggle('d-none');
    }

   async function saveChanges(fields) {
         /*if (!validateFields(fields)) {
        return; // Stop execution if validation fails
    }*/

     const ids = fields.map(field =>field.id)
     const requestBody=[];
       console.log(ids)
        ids.forEach(id => {
            const inputField = document.getElementById(id);
              if (inputField) {
            requestBody[id] = inputField.value;
            inputField.readOnly = true;
        } else {
            console.error(`Element with id '${id}' not found.`);
        }
    
        });
        
        const addres = requestBody.address;
        const addressId = requestBody.addressId;
        const district = requestBody.district;
        const pincode = requestBody.pincode;
        const city = requestBody.city
        const state = requestBody.state;
        const country = requestBody.country;
        
        const response = await fetch('/edit-address',{
            method:'POST',
           headers:{
            'Content-Type':'application/json'
           },
            body:JSON.stringify({
                addres,
                addressId,
                district,
                city,
                pincode,
                state,
                country,
                checkout:'address'
            })
       
        })
      
        if(response.ok){
            const result = await response.json();
            showDynamicModal(result.message);
            //alert(result.message)
        }

        // Toggle visibility of buttons
        document.getElementById('editButtons').classList.toggle('d-none');
        document.getElementById('saveChangesButton').classList.toggle('d-none');
    }


 function showDynamicModal(message) {
    // Create a modal element
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Message</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ${message}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ok</button>

                </div>
            </div>
        </div>
    `;

    // Append the modal to the body
    document.body.appendChild(modal);
    // Show the modal without jQuery
    modal.classList.add('show');
    modal.style.display = 'block';

    // Add an event listener for closing the modal
    const closeModalButton = modal.querySelector('[data-bs-dismiss="modal"]');
    closeModalButton.addEventListener('click', function () {
              //modal.classList.remove('show');
      //  modal.style.display = 'none';
closeModal();
        // Remove the modal from the DOM after it's hidden
       // document.body.removeChild(modal);
    });
        const okButton = modal.querySelector('.modal-footer .btn-secondary');
    okButton.addEventListener('click', function () {
        closeModal();
    });
    function closeModal() {
        // Hide the modal
        modal.classList.remove('show');
        modal.style.display = 'none';

        // Remove the modal from the DOM after it's hidden
        document.body.removeChild(modal); 
    }
}



     function toggleAdd(fields) {
    
        
        const ids = fields.map(field =>field.id)
       console.log(ids)
        ids.forEach(id => {
            const inputField = document.getElementById(id);
              if (inputField) {
                
            inputField.readOnly = !inputField.readOnly;
             inputField.value = '';


        } else {
            console.error(`Element with id '${id}' not found.`);
        }
    
        });

            // Remove selected options from the address dropdown
    const addressDropdown = document.getElementById('addressDropdown');
    if (addressDropdown) {
        const selectedOptions = Array.from(addressDropdown.selectedOptions);
        selectedOptions.forEach(option => {
            option.remove();
        });
    } else {
        console.error("Address dropdown not found.");
    }


        // Toggle visibility of buttons
    document.getElementById('addButtons').classList.toggle('d-none');
    document.getElementById('saveButton').classList.toggle('d-none');
    }


async function AddAddress(event,fields) {
         /*if (!validateFields(fields)) {
        return; // Stop execution if validation fails
    }*/

     const ids = fields.map(field =>field.id)
     const requestBody=[];
       console.log(ids)
        ids.forEach(id => {
            const inputField = document.getElementById(id);
              if (inputField) {
            requestBody[id] = inputField.value;
            inputField.readOnly = true;
        } else {
            console.error(`Element with id '${id}' not found.`);
        }
    
        });
        console.log(requestBody)
        const addres = requestBody.address;
       // const addressId = requestBody.addressId;
        const district = requestBody.district;
        const pincode = requestBody.pincode;
        const city = requestBody.city
        const state = requestBody.state;
        const country = requestBody.country;
        
        const response = await fetch('/add-address',{
            method:'POST',
           headers:{
            'Content-Type':'application/json'
           },
            body:JSON.stringify({
                addres,
               // addressId,
                district,
                city,
                pincode,
                state,
                country,
                checkout:'address'
            })
       
        })
      
        if(response.ok){
            const result = await response.json();
           /// alert(result.message)
            showDynamicModal(result.message);
            window.location.reload()
        }else{
            const result = await response.json();
             showDynamicModal(result.message);
        }

       document.getElementById('addButtons').classList.toggle('d-none');
    document.getElementById('saveButton').classList.toggle('d-none');
    }




///////////////////////////////////////////////////////////////////////

async function placeOrder(event){
    try{
        event.preventDefault();

            const form = event.target;

             const formData = new FormData(form);


            //validation

        

        const fname = formData.get('fname').trim();
        if (fname === "") {
            displayError('fname', 'Please enter your full name.');
            return;
        } 

        const phone = formData.get('phone').trim();
        if (phone === "" || !/^\d{10}$/.test(phone)) {
            displayError('phone', 'Please enter a valid 10-digit phone number.');
            return;
        }

        const address = formData.get('address1');
        if (address === "") {
            displayError('addressDropdown', 'Please choose an address.');
            return;
        }

        const payment = formData.get('payment');
        if (payment === "") {
            displayError('payment', 'Please choose a payment method.');
            return;
        }

        resetErrors();



            
            const response = await fetch('/place-order', {
                method: 'POST',
                body: formData,
            });
             const errorTrueElement = document.getElementById('error_true');
         if (response.ok) {
                const result = await response.json();
                console.log(result)
                console.log(result.message)
                console.log(result.method);
                if(result.method !== "UPI"){
                window.location.href='/order-placed'
                }else{
                    console.log('razorpay')
                    const orderDetails = {
                        "key":result.key_id,
                        "amount":result.amount,
                        "currency":"INR",
                        "order_id":result.order.id,
                        image:'',
                        handler:async function (result){
                            //console.log('hey')
                             const formDataClone = new FormData(form);
                             
                            // console.log(...formDataClone)
                         const response = await fetch('/verifyRazorPay',{
                            method:'POST',
                                body:formDataClone
                            });

                            /*.then(result=>result.json())
                            .then(data=>{
                                console.log('data',data)
                                if(data){
                                    window.location.reload='/order-placed';
                                }else{
                                    console.error('Payment failed',data.message);
                                }
                            })*/
                              if (response.ok) {
                            const result1 = await response.json();
                           // console.log(result.message);
                           // if(result1.success){
                                     window.location.href='/order-placed'
                           // }else{
                             //   console.log('payment failed':result1.error)
                            //}
                           
                            }else{
                                            const result = await response.json();
                                           // alert(result.errorMessages)
                                            const customAlertContainer = document.getElementById('customAlertContainer');
                                            const customAlertStrong = document.getElementById('customAlertStrong');

                                                customAlertStrong.textContent = result.errorMessages;
                                                customAlertContainer.style.display = 'block';           

                                        console.log('Failed to place order');
                                        errorTrueElement.textContent = result.errorMessages;
                            }
                        }
                    }
                
            if(orderDetails){
        const razorpay = new Razorpay(orderDetails);
        razorpay.on('payment.failed', function (response){
            alert(response.error.reason);
        });
        razorpay.open();
            }
         }
        }else {
            const result = await response.json();
                console.log('Failed to place order');
                 //alert(result.errorMessages)
                const customAlertContainer = document.getElementById('customAlertContainer');
                const customAlertStrong = document.getElementById('customAlertStrong');

                customAlertStrong.textContent = result.errorMessages;
                customAlertContainer.style.display = 'block';    
              //  errorTrueElement.textContent = result.errorMessages;
              //  customAlertContainer.scrollIntoView({ behavior: 'smooth' });
               // customAlertContainer.focus();
            }
 

    }catch(error) {
            console.log('Error:', error);
        }
}
function displayError(fieldId, message) {
    const errorDiv = document.querySelector('#' + fieldId + ' + .error');
    errorDiv.innerHTML = message;
    errorDiv.style.display = 'block';
}

function resetErrors() {
    const errorDivs = document.querySelectorAll('.error');
    errorDivs.forEach(function (errorDiv) {
        errorDiv.innerHTML = '';
        errorDiv.style.display = 'none';
    });
}



</script>